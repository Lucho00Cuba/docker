#!/bin/csh

#--------------------------------------------------------------------------
# This code gets the binary type 
#---------------------------------------------------------------------------
set _CUR_PATH_ENV = "$PATH"
setenv PATH /usr/bin:/bin:/usr/local/bin:/local/bin:/sbin:/usr/sbin:/usr/ucb:/usr/sbin:/usr/bsd:${PATH}

# handle difference between system V and BSD echo
# To echo "foo" with no newline, do
# echo $enf "foo" $enl

if ( "`echo -n`" == "-n" )  then
    set enf=
    set enl="\c"
else
    set enf=-n
    set enl=
endif

#---------------Start BINARY_TYPE detection--------------
set LSNULFILE=/dev/null

# Find a version of awk we can trust

set echo_on = `set | grep ^echo | grep -v ^echo_`
if ( "$echo_on" == "echo" ) then
    unset echo
endif

set AWK=""
foreach tmp (awk  /usr/toolbox/nawk gawk nawk)
#   This is the real test, for functions & tolower
#    if foo=`(echo FOO | $tmp 'function tl(str) { return tolower(str) } { print tl($1) }') 2>$LSNULFILE` \
#       && test "$foo" = "foo"
#   A simpler test, just for executability
    set val_tmp=`$tmp 'BEGIN{ } { }'< $LSNULFILE |& cat`
    if ( "$val_tmp" == "" )  then
	set AWK=$tmp
        break
    endif
end

if ( "$echo_on" == "echo" ) then
    set echo
endif
unset echo_on

if (  "$AWK" == "") then
    echo "Cannot find a correct version of awk."
    echo "Exiting ..."
    exit 1
endif

if ( ("$?EGO_TOP" == "0") || ("$?EGO_CONFDIR" == "0") ) then
	echo "To run this file, first set your IBM Spectrum Symphony environment using cshrc.platform. Do not run this file separately."
	exit 1
endif

if ( "$?EGO_TOP" == "0" ) then
	if ( "$?EGO_ENVDIR" == "0" ) then
		if ( "$?EGO_CONFDIR" == "1" ) then 
			if ( -f $EGO_CONFDIR/ego.conf ) then
				set EGOCONF="${EGO_CONFDIR}/ego.conf" 
			endif
		else
			if ( -f /etc/ego.conf ) then
				set EGOCONF="/etc/ego.conf"
			else
				echo "Can not find the ego.conf file"
			endif
		endif   
	else
		if ( -f ${EGO_ENVDIR}/ego.conf ) then
			set EGOCONF="${EGO_ENVDIR}/ego.conf"
		else
			if ( "$?EGO_CONFDIR" == "1" ) then 
				if ( -f $EGO_CONFDIR/ego.conf ) then
					set EGOCONF="${EGO_CONFDIR}/ego.conf" 
				else
					if ( -f /etc/ego.conf ) then
						set EGOCONF="/etc/ego.conf"
					else
						echo "Can not find the ego.conf file"
					endif
				endif
			else
				if ( -f /etc/ego.conf ) then
					set EGOCONF="/etc/ego.conf"
				else
					echo "Can not find the ego.conf file"
				endif
			endif
		endif
	endif
	set EGO_TOP=`grep '^[ 	]*EGO_TOP' ${EGOCONF} | sed -e 's/^.*=//g'`
endif

# Clear environment variables
unsetenv PERF_TOP PERF_CONFDIR PERF_WORKDIR PERF_DATADIR PERF_LOGDIR

# Get environment variable from lsf.conf first.
if ( "$?LSF_ENVDIR" == "1" ) then
    setenv PERF_TOP `grep '^[ 	]*PERF_TOP' ${LSF_ENVDIR}/lsf.conf | sed -e 's/^.*=//g'`
    setenv PERF_CONFDIR `grep '^[ 	]*PERF_CONFDIR' ${LSF_ENVDIR}/lsf.conf | sed -e 's/^.*=//g'`
    setenv PERF_WORKDIR `grep '^[ 	]*PERF_WORKDIR' ${LSF_ENVDIR}/lsf.conf | sed -e 's/^.*=//g'`
    setenv PERF_DATADIR `grep '^[ 	]*PERF_DATADIR' ${LSF_ENVDIR}/lsf.conf | sed -e 's/^.*=//g'`
    setenv PERF_LOGDIR `grep '^[ 	]*PERF_LOGDIR' ${LSF_ENVDIR}/lsf.conf | sed -e 's/^.*=//g'`
endif

# set PERF_CONFIDR
if ( "$?PERF_CONFDIR" == "0" ) then
    setenv PERF_CONFDIR ${EGO_CONFDIR}/../../perf/conf
endif
if ( "${PERF_CONFDIR}" == "" ) then
    setenv PERF_CONFDIR ${EGO_CONFDIR}/../../perf/conf
endif

# set PERF_TOP
if ( "$?PERF_TOP" == "0" ) then
	grep '^[ 	]*PERF_TOP' ${PERF_CONFDIR}/perf.conf >& /dev/null
	if ( "$status" == "0" ) then
		setenv PERF_TOP `grep '^[ 	]*PERF_TOP' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g' | sed 's|${EGO_TOP}|{{{EGO_TOP}}}|g' | sed "s?{{{EGO_TOP}}}?$EGO_TOP?g"`
	endif
endif
if ( "$?PERF_TOP" == "0" ) then
    setenv PERF_TOP ${EGO_TOP}/perf
endif
if ( "$PERF_TOP" == "" ) then
    setenv PERF_TOP ${EGO_TOP}/perf
endif

#set JAVA_HOME
#set JAVA_HOME=`grep '^[ |	]*JAVA_HOME' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g'`

# set PERF_WORKDIR
if ( "$?PERF_WORKDIR" == "0" ) then
	grep '^[ 	]*PERF_WORKDIR' ${PERF_CONFDIR}/perf.conf >& /dev/null
	if ( "$status" == "0" ) then
		setenv PERF_WORKDIR `grep '^[ 	]*PERF_WORKDIR' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g' | sed 's|${EGO_CONFDIR}|{{{EGO_CONFDIR}}}|g' | sed "s?{{{EGO_CONFDIR}}}?$EGO_CONFDIR?g"`
	endif
endif
if ( "$?PERF_WORKDIR" == "0" ) then
	setenv PERF_WORKDIR ${EGO_CONFDIR}/../../perf/work
endif
if ( "$PERF_WORKDIR" == "" ) then
	setenv PERF_WORKDIR ${EGO_CONFDIR}/../../perf/work
endif

# Set PERF_DATADIR
if ( "$?PERF_DATADIR" == "0" ) then
	grep '^[ 	]*PERF_DATADIR' ${PERF_CONFDIR}/perf.conf >& /dev/null
	if ( "$status" == "0" ) then
		setenv PERF_DATADIR `grep '^[ 	]*PERF_DATADIR' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g' | sed 's|${EGO_TOP}|{{{EGO_TOP}}}|g' | sed "s?{{{EGO_TOP}}}?$EGO_TOP?g"`
	endif
endif
if ( "$?PERF_DATADIR" == "0" ) then
	setenv PERF_DATADIR ${PERF_TOP}/data
endif
if ( "$PERF_DATADIR" == "" ) then
	setenv PERF_DATADIR ${PERF_TOP}/data
endif

# Set PERF_LOGDIR
if ( "$?PERF_LOGDIR" == "0" ) then
	grep '^[ 	]*PERF_LOGDIR' ${PERF_CONFDIR}/perf.conf >& /dev/null
	if ( "$status" == "0" ) then
		setenv PERF_LOGDIR `grep '^[ 	]*PERF_LOGDIR' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g'| sed 's|${EGO_TOP}|{{{EGO_TOP}}}|g' | sed "s?{{{EGO_TOP}}}?$EGO_TOP?g"`
	endif
endif
if ( "$?PERF_LOGDIR" == "0" ) then
	setenv PERF_LOGDIR ${PERF_TOP}/logs
endif
if ( "$PERF_LOGDIR" == "" ) then
	setenv PERF_LOGDIR ${PERF_TOP}/logs
endif

setenv PERF_VERSION `grep '^[ 	]*PERF_VERSION' ${PERF_CONFDIR}/perf.conf | sed -e 's/^.*=//g'`
#setenv PERF_VERSION `echo ${PERF_VERSION} | sed "s/\(.*\)\.\(.*\)\.\(.*\)/\1\.\2/g"`
setenv PERF_ENV "-DPERF_TOP=${PERF_TOP} -DPERF_CONFDIR=${PERF_CONFDIR} -DPERF_WORKDIR=${PERF_WORKDIR} -DPERF_LOGDIR=${PERF_LOGDIR} -DPERF_DATADIR=${PERF_DATADIR}"
setenv PATH "${PERF_TOP}/${PERF_VERSION}/bin:${PATH}"

#remove duplicated entries
set PATH_TMP=`echo $PATH | $AWK 'BEGIN{RS=":";ORS=":"}{if (a[$1]==0)  {if (NR > 1) printf ORS; printf $a[$1]}; a[$1]++;}'`
setenv PATH $PATH_TMP
unset PATH_TMP

